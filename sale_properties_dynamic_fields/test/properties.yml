-
  I modify the property group Length
-
  !record {model: mrp.property.group, id: sale_properties_easy_creation.length_group, view: mrp.mrp_property_group_form_view}:
    draw_dynamically: True
-
  I check the created field
-
  !python {model: mrp.property.group}: |
    group = self.browse(cr, uid, ref('sale_properties_easy_creation.length_group'), context=context)
    assert group.field_id.name == 'x_length', "Field name must be 'x_length', %s found" % group.field_id.name
-
  I remove the draw_dynamically field
-
  !record {model: mrp.property.group, id: sale_properties_easy_creation.length_group, view: mrp.mrp_property_group_form_view}:
    draw_dynamically: False
-
  I check the removed field
-
  !python {model: mrp.property.group}: |
    group = self.browse(cr, uid, ref('sale_properties_easy_creation.length_group'), context=context)
    assert not group.field_id, "field_id must be empty"
-
  I craete the property group depth
-
  !record {model: mrp.property.group, id: depth_group, view: mrp.mrp_property_group_form_view}:
    name: Depth
    draw_dynamically: True
-
  I check the created field and remove the group
-
  !python {model: mrp.property.group}: |
    group = self.browse(cr, uid, ref('depth_group'), context=context)
    assert group.field_id.name == 'x_depth', "Field name must be 'x_depth', %s found" % group.field_id.name
    group.unlink()
    field_pool = self.pool['ir.model.fields']
    field_ids = field_pool.search(cr, uid, [
        ('name', '=', 'x_depth'),
        ('model', '=', 'sale.order.line'),
        ],
        context=context)
    assert not field_ids, "No x_depth field must be present"
    
